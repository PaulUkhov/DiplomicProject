package org.example.diplomicproject.security;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import java.util.Date;
@Tag(name = "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞")
@Component
public class JwtUtil {

    @Value("${jwtsecret}")
    private String jwtSecret;

    @Value("${jwtExpirationMs}")
    private long jwtExpirationMs; // access token —Å—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 –º–∏–Ω—É—Ç)

    @Value("${jwtRefreshExpirationMs}")
    private long jwtRefreshExpirationMs; // refresh token —Å—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7 –¥–Ω–µ–π)

    // üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è access —Ç–æ–∫–µ–Ω–∞ (–∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–∏–π)
    public String generateToken(UserDetails userDetails) {
        return Jwts.builder()
                .setSubject(userDetails.getUsername())
                .claim("roles", userDetails.getAuthorities().stream()
                        .map(GrantedAuthority::getAuthority)
                        .toList())
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + jwtExpirationMs))
                .signWith(SignatureAlgorithm.HS256, jwtSecret)
                .compact();
    }

    // üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è refresh —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–≥–æ–∂–∏–≤—É—â–∏–π, –±–µ–∑ —Ä–æ–ª–µ–π)
    public String generateRefreshToken(UserDetails userDetails) {
        return Jwts.builder()
                .setSubject(userDetails.getUsername())
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + jwtRefreshExpirationMs))
                .signWith(SignatureAlgorithm.HS256, jwtSecret)
                .compact();
    }

    // üì§ –ü–æ–ª—É—á–µ–Ω–∏–µ username (subject) –∏–∑ —Ç–æ–∫–µ–Ω–∞
    public String getUsernameFromToken(String token) {
        return parseToken(token).getBody().getSubject();
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ —Å—Ä–æ–∫)
    public boolean validateToken(String token) {
        try {
            parseToken(token);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    // ‚åõ –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω
    public boolean isTokenExpired(String token) {
        try {
            Date expiration = parseToken(token).getBody().getExpiration();
            return expiration.before(new Date());
        } catch (Exception e) {
            return true; // –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
        }
    }

    // üîç –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ ‚Äî –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞
    private Jws<Claims> parseToken(String token) {
        return Jwts.parser()
                .setSigningKey(jwtSecret)
                .parseClaimsJws(token);
    }
}

